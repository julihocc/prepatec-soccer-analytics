"""
Core QTI conversion functionality.
Orchestrates the entire conversion process from question banks to Canvas QTI.
"""

import os
import sys
from pathlib import Path
from typing import Optional

try:
    from txttoqti import TxtToQtiConverter
except ImportError as e:
    print("‚ùå Error: No se puede importar la librer√≠a txttoqti.")
    print("   Instala con: pip install txttoqti>=0.2.0")
    print(f"   Error espec√≠fico: {e}")
    sys.exit(1)

from .utils import FileManager, BlockDetector
from .format_converter import FormatConverter


class QtiConverter:
    """Orchestrates the complete QTI conversion process."""
    
    def __init__(self, script_path: Optional[Path] = None):
        """
        Initialize the QTI converter.
        
        Args:
            script_path: Path to the calling script (for auto-detection)
        """
        self.file_manager = FileManager()
        self.format_converter = FormatConverter()
        
        # Auto-detect block information
        try:
            self.block_num, self.txt_file, self.qti_file = BlockDetector.detect_block_info(script_path)
            self.block_description = BlockDetector.get_block_description(self.block_num)
        except ValueError as e:
            print(f"‚ùå Error en detecci√≥n autom√°tica: {e}")
            sys.exit(1)
    
    def show_status(self) -> None:
        """Muestra el estado actual del archivo y conversi√≥n."""
        if not os.path.exists(self.txt_file):
            print(f"‚ùå Error: Archivo {self.txt_file} no encontrado")
            return
        
        question_count = self.file_manager.count_questions(self.txt_file)
        qti_exists = os.path.exists(self.qti_file)
        needs_regeneration = self.file_manager.file_changed(self.txt_file) or not qti_exists
        
        print(f"üìä ESTADO DEL ARCHIVO - BLOQUE {self.block_num}:")
        print(f"   Descripci√≥n: {self.block_description}")
        print(f"   Fuente: {self.txt_file}")
        print(f"   Preguntas: {question_count}")
        print(f"   QTI: {self.qti_file} {'(existe)' if qti_exists else '(no existe)'}")
        
        if needs_regeneration:
            print("üîÑ Regeneraci√≥n requerida")
        else:
            print("‚úÖ Sin cambios necesarios")
    
    def convert(self, force: bool = False) -> bool:
        """
        Ejecuta la conversi√≥n completa de QTI.
        
        Args:
            force: Si True, fuerza la regeneraci√≥n aunque no haya cambios
            
        Returns:
            bool: True si la conversi√≥n fue exitosa
        """
        # Verificar archivo fuente
        if not os.path.exists(self.txt_file):
            print(f"‚ùå Error: Archivo {self.txt_file} no encontrado")
            return False
        
        question_count = self.file_manager.count_questions(self.txt_file)
        
        # Verificar si necesita regeneraci√≥n
        needs_regeneration = (force or 
                             self.file_manager.file_changed(self.txt_file) or 
                             not os.path.exists(self.qti_file))
        
        if not needs_regeneration:
            print(f"‚úÖ QTI est√° actualizado: {self.qti_file}")
            print(f"üìä {question_count} preguntas - sin cambios necesarios")
            return True
        
        try:
            print(f"üîÑ Iniciando conversi√≥n para Bloque {self.block_num}")
            print(f"üìù {self.block_description}")
            
            # Validar formato antes de convertir
            with open(self.txt_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            is_valid, errors = self.format_converter.validate_question_format(content)
            if not is_valid:
                print("‚ö†Ô∏è  Advertencias de formato encontradas:")
                for error in errors[:5]:  # Mostrar m√°ximo 5 errores
                    print(f"   ‚Ä¢ {error}")
                if len(errors) > 5:
                    print(f"   ‚Ä¢ ... y {len(errors) - 5} m√°s")
                
                response = input("¬øContinuar con la conversi√≥n? (y/N): ")
                if response.lower() != 'y':
                    print("‚ùå Conversi√≥n cancelada por el usuario")
                    return False
            
            # Convertir formato
            print(f"üîÑ Convirtiendo formato de {question_count} preguntas...")
            converted_file = self.txt_file.replace('.txt', '_txttoqti_format.txt')
            self.format_converter.convert_to_txttoqti_format(self.txt_file, converted_file)
            print(f"‚úÖ Formato convertido")
            
            # Generar QTI
            print(f"üîÑ Generando QTI con txttoqti v0.2.0+...")
            converter = TxtToQtiConverter()
            result = converter.convert_file(converted_file, self.qti_file)
            
            if result and os.path.exists(result):
                print(f"\nüéâ ¬°{question_count} preguntas convertidas exitosamente!")
                print(f"üì¶ QTI generado: {Path(result).name}")
                file_size = Path(result).stat().st_size
                print(f"üìè Tama√±o: {file_size:,} bytes")
                print(f"üéØ Bloque: {self.block_num} - {self.block_description}")
                
                # Limpiar archivo temporal
                try:
                    os.unlink(converted_file)
                except Exception:
                    pass
                
                return True
            else:
                print("‚ùå Error: No se pudo generar el archivo QTI")
                return False
                
        except Exception as e:
            print(f"\n‚ùå Error durante la conversi√≥n: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def get_file_info(self) -> dict:
        """Retorna informaci√≥n sobre los archivos del bloque actual."""
        return {
            'block_num': self.block_num,
            'block_description': self.block_description,
            'txt_file': self.txt_file,
            'qti_file': self.qti_file,
            'question_count': self.file_manager.count_questions(self.txt_file) if os.path.exists(self.txt_file) else 0,
            'qti_exists': os.path.exists(self.qti_file),
            'needs_regeneration': (self.file_manager.file_changed(self.txt_file) if os.path.exists(self.txt_file) else True) or not os.path.exists(self.qti_file)
        }