#!/usr/bin/env python3
"""
Script de instalaci√≥n autom√°tica para el curso de Ciencia de Datos Aplicada al F√∫tbol
Tecnol√≥gico de Monterrey - T√≥picos de Ciencia de Datos

Este script instala autom√°ticamente todas las dependencias necesarias
para ejecutar los notebooks del curso.
"""

import subprocess
import sys
import os
from pathlib import Path

def main():
    print("üèà INSTALADOR DE DEPENDENCIAS - CIENCIA DE DATOS APLICADA AL F√öTBOL")
    print("=" * 70)
    print("Tecnol√≥gico de Monterrey - T√≥picos de Ciencia de Datos")
    print("=" * 70)
    
    # Verificar que Python est√° disponible
    python_version = sys.version_info
    print(f"üêç Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print("üí° Por favor actualice su versi√≥n de Python")
        return False
    
    # Buscar archivo requirements.txt
    script_dir = Path(__file__).parent
    requirements_file = script_dir / 'requirements.txt'
    
    if not requirements_file.exists():
        print(f"‚ùå Archivo requirements.txt no encontrado en: {requirements_file}")
        return False
    
    print(f"üìã Archivo de requerimientos: {requirements_file}")
    
    # Actualizar pip primero
    print("\nüì¶ Actualizando pip...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                      check=True, capture_output=True)
        print("‚úÖ pip actualizado correctamente")
    except subprocess.CalledProcessError as e:
        print("‚ö†Ô∏è Advertencia: No se pudo actualizar pip")
    
    # Instalar dependencias
    print("\nüì• Instalando dependencias del curso...")
    try:
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)
        ], check=True, capture_output=True, text=True)
        
        print("‚úÖ Todas las dependencias instaladas correctamente")
        
    except subprocess.CalledProcessError as e:
        print("‚ùå Error durante la instalaci√≥n:")
        print(f"C√≥digo de error: {e.returncode}")
        print(f"Error: {e.stderr}")
        return False
    
    # Verificar instalaci√≥n
    print("\nüîç Verificando instalaci√≥n...")
    packages_to_verify = [
        'pandas', 'numpy', 'matplotlib', 'seaborn', 
        'scikit-learn', 'scipy', 'jupyter'
    ]
    
    all_installed = True
    for package in packages_to_verify:
        try:
            if package == 'scikit-learn':
                __import__('sklearn')
            else:
                __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            all_installed = False
    
    if all_installed:
        print("\nüéâ ¬°INSTALACI√ìN COMPLETADA EXITOSAMENTE!")
        print("üöÄ Todos los paquetes necesarios est√°n disponibles")
        print("üìö Ya puedes ejecutar los notebooks del curso")
        print("\nüí° Para iniciar Jupyter Notebook ejecuta:")
        print("   jupyter notebook")
    else:
        print("\n‚ùå Algunos paquetes no se instalaron correctamente")
        print("üí° Intenta ejecutar manualmente:")
        print("   pip install -r requirements.txt")
    
    print("\n" + "=" * 70)
    return all_installed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
